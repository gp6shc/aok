<?php/** * StackApps autoposting campaigns */if(!isset($_SESSION)){	session_start();}/** * Create "autoposting_campaigns" table if it doesn't exist yet * */function autoposting_init() {    global $wpdb, $table_prefix;    if(get_option('autoposting_table_created') != '1') {        $table_name = $table_prefix.'autoposting_campaigns';        $wpdb->query("drop table if exists ".$table_name);        $wpdb->query(            "CREATE TABLE IF NOT EXISTS ".$table_name." (                `id` int(9) NOT NULL PRIMARY KEY AUTO_INCREMENT,                `campaign_name` varchar(255) NOT NULL,                `search_term` varchar(255) NOT NULL,                `site` varchar(25) NOT NULL,                `interval_days` int(3) NOT NULL DEFAULT '0',                `interval_hours` int(3) NOT NULL DEFAULT '0',                `category_id` int(9),                `post_status` int(1) NOT NULL DEFAULT '1',                `enabled` int(1) NOT NULL DEFAULT '1',		`postnum` int(5) NOT NULL DEFAULT '1',        		        	`page_count` int(7) DEFAULT '1'            )            "        );        $table_name = $table_prefix."autoposting_status";        $wpdb->query("drop table ".$table_name);        $wpdb->query(            "CREATE TABLE IF NOT EXISTS ".$table_name." (                `id` int(9) NOT NULL PRIMARY KEY AUTO_INCREMENT,                `campaign_id` int(9) NOT NULL,                `start` int(9) NOT NULL,                `last_post_time` varchar(15),                 unique campaign_id(campaign_id)            )            "        );                update_option('autoposting_table_created', '1');    }  	if($wpdb->get_var("SHOW TABLES LIKE '{$wpdb->prefix}autoposting_campaigns'") == $wpdb->prefix . 'autoposting_campaigns')	{	    $sql = "SHOW COLUMNS FROM {$wpdb->prefix}autoposting_campaigns LIKE 'postnum'";	    if(!$wpdb->get_var($sql) )	    {	    	$sql2 = "alter table {$wpdb->prefix}autoposting_campaigns add postnum int default '1' after enabled  ";	    	$wpdb->query($sql2);	    }	    $sql = "SHOW COLUMNS FROM {$wpdb->prefix}autoposting_campaigns LIKE 'page_count'";	    if(!$wpdb->get_var($sql) )	    {		$sql2 = "alter table {$wpdb->prefix}autoposting_campaigns add page_count int(7) default '1' after postnum  ";	    	$wpdb->query($sql2);	    }		$sql2 = "alter table {$wpdb->prefix}autoposting_campaigns modify site varchar(25) not null ";	    	$wpdb->query($sql2);  	}}/** * Cron job executor */if(!empty($_POST['post_now'])) {function autoposting_exec($args=null) {    global $wpdb, $table_prefix;    $table_name = $table_prefix.'autoposting_campaigns';    // need to get the StackApps app id    if(!isset($args['cron'])) {        global $wp_rewrite;            if(!is_object($wp_rewrite)) {                $wp_rewrite = new WP_Rewrite();            }                    do_action('init');    }    $app_id = $args['app_id'];    if(empty($app_id)) {        $app_id = $_POST['autoposting_stack_id'];    }    if(empty($app_id)) {        return;    }    $campaign_id = $args['campaign_id'];    $campaign = $wpdb->get_results("select * from ".$table_name." where id='".$args['campaign_id']."'");    $campaign = $campaign[0];        $table_name = $table_prefix.'autoposting_status';    $task_details = $wpdb->get_results("select * from ".$table_name." where campaign_id='".$args['campaign_id']."'");    	//Stack Exchange Fetching Questions    require_once 'config.php';         $site = API::Site($campaign->site);         $request = $site->SearchAdvanced($campaign->search_term);         $table_name=$table_prefix.'autoposting_campaigns';         $count = $wpdb->get_results("select * from ".$table_name." where id='".$campaign_id."'");        $x=$count['0']->page_count;        $question= $request->Exec()->Pagesize((int)$_POST['posts'][$campaign_id])->Page($x);         $x=($x+5);         $wpdb->query("UPDATE ".$table_name." SET page_count=".$x." WHERE id='".$campaign_id."'");        while($questions = $question->Fetch(FALSE)){      // insert user    $user_login = apply_filters('pre_user_login', ($questions['owner']['display_name']));    $user_login = preg_replace('/[^a-zA-Z0-9_]+/', '', $user_login);    if(empty($user_login) || trim($user_login) == '') {        $user_login = 'anonymous_user';    }        $tmp = $wpdb->get_results("select * from ".$wpdb->users." where 1 and user_login='".$user_login."'");    if(empty($tmp)) {        $userdata = array(    	    	'user_pass' => wp_hash_password('wrandnswers+x971'.microtime()),        		'user_login' => $user_login,        		'display_name' => !empty($questions['owner']['display_name']) ? $questions['owner']['display_name'] : $user_login,        		'user_url' => '',        		'user_email' => strtolower($questions['owner']['display_name']).'@email.null'      	);      	$wpuserid = wp_insert_user($userdata);    }    else {        $wpuserid = $tmp[0]->ID;    }      	$post_statuses = array('1' => 'publish', '2' => 'pending', '3' => 'draft');  		$post = array(            'comment_status' => 'open',  // 'closed' means no comments.            'ping_status' => 'open', // 'closed' means pingbacks or trackbacks turned off            'post_author' => $wpuserid, //The user ID number of the author.            'post_content' => $questions['body'], //The full text of the post.            'post_status' => $post_statuses[$campaign->post_status],  //Set the status of the new post.            'post_title' => $questions['title'], //The title of your post.            'post_type' => 'question', //You may want to insert a regular post, page, link, a menu item or some custom post type        );	    global $up_options;    if(empty($up_options)) {        $up_options = new stdClass();    }    if(!empty($_POST['points_per_question'])) {        $up_options->points_per_question = $_POST['points_per_question'];       }        $id = wp_insert_post($post);    // set question category    wp_set_object_terms($id, array((int)$campaign->category_id), 'question_category');               // handle comments	// Stack Exchange retrieving Answers for Questions.    $sitea = API::Site($campaign->site);	$answers = array();		$answer = $sitea->Questions($questions['question_id'])->Answers()->Exec();		while($answers = $answer->Fetch(TRUE)){           $data = array(            'comment_post_ID' => $id,            'comment_author' => $answers['owner']['display_name'],            'comment_author_email' => $answers['owner']['display_name'].'@email.null',            'comment_content' => $answers['body'],            'comment_type' => '',	            'comment_parent' => 0,            'comment_author_IP' => '127.0.0.1',            'comment_agent' => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10 (.NET CLR 3.5.30729)',            'comment_date' => $answers['creation_date'],            'comment_approved' => 1,        );           $commentID = wp_insert_comment($data);		    	        if($questions['owner']['user_id'] == $answers['owner']['user_id']) {	            // set as best answer		            update_post_meta($id, '_bestanswer', $commentID);	    }	  	}    }    $table_name = $table_prefix.'autoposting_status';    $wpdb->query("insert into ".$table_name." (campaign_id, start, last_post_time) values ('".$args['campaign_id']."', 'start+1', '".time()."') on duplicate key update start=start+1, last_post_time='".time()."' ");    }}add_action('init', 'autoposting_init');// post nowif(!empty($_POST['post_now'])) {        if(!empty($_POST['post_campaigns'])) {                foreach ($_POST['post_campaigns'] as $c) {            if(empty($_POST['posts'])) $posts = 1;            else {                $GLOBALS['posts'] = (int)$_POST['posts'][$c];            }            autoposting_exec(array('campaign_id' => $c, 'app_id' => $_POST['autoposting_stack_id']));            $_SESSION['postnow']['campaign_'.$c]['posts'] = $posts;        }        wp_safe_redirect("?page=themefurnace#/post-now");        exit;    }}if(!empty($_POST['autoposting_site'])) {        global $wpdb, $table_prefix;    $table_name = $table_prefix.'autoposting_campaigns';        if($_GET['campaign'] == 'new') {        $wpdb->query("insert into ".$table_name."             (campaign_name, search_term, site, interval_days, interval_hours, category_id, post_status, enabled)                        values (            '".$_POST['autoposting_campaign_name']."', '".$_POST['autoposting_search_term']."', '".$_POST['autoposting_site']."',            '".(int)$_POST['autoposting_interval_days']."', '".(int)$_POST['autoposting_interval_hours']."', '".$_POST['autoposting_category']."',            '".$_POST['autoposting_post_status']."', '".$_POST['autoposting_campaign_enabled']."'            )        ");        $id = $wpdb->insert_id;    }    else {        $id = (int)$_GET['campaign'];        $wpdb->query("update ".$table_name." set            campaign_name='".$_POST['autoposting_campaign_name']."',            search_term='".$_POST['autoposting_search_term']."',             site='".$_POST['autoposting_site']."',             interval_days='".(int)$_POST['autoposting_interval_days']."',             interval_hours='".(int)$_POST['autoposting_interval_hours']."',             category_id='".$_POST['autoposting_category']."',            post_status='".$_POST['autoposting_post_status']."',             enabled='".$_POST['autoposting_campaign_enabled']."'                        WHERE id='".$id."'        ");    }        // add/modify scheduled task for enabled campaign    if($_POST['autoposting_campaign_enabled'] == '1') {        // check if we should exec it        $interval = make_post_interval($_POST['autoposting_interval_days'], $_POST['autoposting_interval_hours']);        $last_update = $wpdb->get_col("select last_post_time from ".$table_prefix."autoposting_status where campaign_id='".$id."'");                if(empty($last_update) || $last_update[0]+$interval >= time()) {          // autoposting_exec(array('campaign_id' => $id, 'app_id' => $_POST['autoposting_stack_id']));        }            }       // unset post for upthemes    $_POST = array();     if($_GET['campaign'] == 'new') {        wp_safe_redirect("?page=themefurnace#/stack-autoposting-campaigns");    }    else {                wp_safe_redirect("?page=themefurnace#/post-now");    }    exit;}/** * Get time in seconds based on user selection (days + hours). * * @param $days * @param $hours */function make_post_interval($days=null, $hours=null) {    $time = 0;    $name = '';    if(!empty($days)) {        $time += 3600*24*(int)$days;    }    if(!empty($hours)) {        $time += 3600 * (int)$hours;    }        return $time;}